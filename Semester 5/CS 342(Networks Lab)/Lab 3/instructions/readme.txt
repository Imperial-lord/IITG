In this file, I'll explain how to compile and run the submission and also breifly describe everything.

This is the directory structure:

Group_49
	-Instructions
	-Peer1 
		- peer1
		- peer_node.c
		- sample1.txt
	-Peer2
		- peer2
		- peer_node.c
		- sample2.txt
	-Peer3
		- peer3
		- peer_node.c
		- sample3.txt
	-peer_client
	-peer_client.c
	-relay_server
	-relay_server.c

A short description about each :
1. Instructions has this readme.txt file which describes everything in detail
2. Peer1 has 3 files:
	a. peer1 is an executable file 
	b. peer_node.c is the source code file
	c. sample1.txt is a random word file
3. The same holds for Peer2 and Peer3. Note that all c files are same, but all text files are different (both in name and content)
4. peer_client is the executable file for peer_client.c
5. relay_server is the executable file for relay_server.c
6. The names are self explanatory. 

Prototyes for all 3 files are as follows : (also mentioned in code comments)
1. Server : <executable code> <Server IP address> 
2. Peer(s): <executable code> <Server IP address> <Server Port Number>
3. Client : <executable code> <Server IP address> <Server Port Number>

Procedure to compile and run:

1. First remove any .txt files that have been generated by a previous execution (namely nodesinfo.txt and nodeinfo_server.txt). These files are generated and are needed for code to work but might cause errors in subsequent execution.

2. Then open 5 terminals, 2 in Group_49 and 3 in each of the peer1/2/3 directories.

3. Then to generate the executable files (also already there) use the following : (compilation step)
	a. Terminal 1: Group_49$ gcc -o relay_server relay_server.c
	b. Terminal 2: Group_49$ gcc -o peer_client peer_client.c
	c. Terminal 3: Group_49/peer1$ gcc -o peer1 peer_node.c
	d. Terminal 4: Group_49/peer2$ gcc -o peer2 peer_node.c
	e. Terminal 5: Group_49/peer3$ gcc -o peer3 peer_node.c

4. To execute do the following (in order).
	a. Terminal 1: Group_49$ ./relay_server 8000
	b. Terminal 3: Group_49/peer1$ ./peer1 0.0.0.0 8000
	c. Terminal 4: Group_49/peer2$ ./peer2 0.0.0.0 8000
	d. Terminal 5: Group_49/peer3$ ./peer3 0.0.0.0 8000
	e. Terminal 2: Group_49$ ./peer_client 0.0.0.0 8000

5. Note that the server port can be anything as long as it's available. After running the peer_client, it'll interactively ask for file name. If the file name matches with sample1.txt, or sample2.txt or sample3.txt, the content will be printed and the connection will close (for client and the corresponding nodes). The relay_server will however keep listening, for future connection requests. To make a future request, first clean the .txt files generated and then run the nodes/clients again

That's all. Thanks and have a great day!
	
	
	
	
	
	
	
	
	
	
	





